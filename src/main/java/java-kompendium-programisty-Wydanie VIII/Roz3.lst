Listing 1.
// Obliczanie odleg³oœci przebytej przez œwiat³o za pomoc¹ zmiennych typu long.
class Light {
  public static void main(String args[]) {
    int lightspeed;
    long days;
    long seconds; 
    long distance;

    // przybli¿ona prêdkoœæ œwiat³a w kilometrach na sekundê
    lightspeed = 299792;

    days = 1000; // okreœlenie liczby dni

    seconds = days * 24 * 60 * 60; // konwersja na sekundy

    distance = lightspeed * seconds; // obliczenie odleg³oœci

    System.out.print("W " + days);
    System.out.print(" dni œwiat³o przebêdzie ");
    System.out.println(distance + " kilometrów.");
  }
}

Listing 2.
// Obliczenie pola ko³a.
class Area {
  public static void main(String args[]) {
    double pi, r, a; 

    r = 10.8; // promieñ ko³a
    pi = 3.1416; // przybli¿ona wartoœæ pi
    a = pi * r * r; // obliczenie pola

    System.out.println("Pole ko³a wynosi " + a);
  }
}

Listing 3.
// Przyk³ad u¿ycia typu danych char.
class CharDemo {
  public static void main(String args[]) {
    char ch1, ch2;

    ch1 = 88;  // kod dla X
    ch2 = 'Y';
    
    System.out.print("ch1 i ch2: ");
    System.out.println(ch1 + " " + ch2);
  }
}


Listing 4.
// Zmienne typu char zachowuj¹ siê jak zmienne typu int. 
class CharDemo2 {
  public static void main(String args[]) {
    char ch1;

    ch1 = 'X';
    System.out.println("ch1 zawiera znak " + ch1);

    ch1++; // inkrementacja ch1
    System.out.println("teraz ch1 ma wartoœæ " + ch1);
  }
}

Listing 5.
// Przyk³ad u¿ycia typu boolean.
class BoolTest {
  public static void main(String args[]) {
    boolean b;

    b = false;
    System.out.println("b wynosi " + b);
    b = true;
    System.out.println("b wynosi " + b);

    // wartoœæ logiczna mo¿e sterowaæ wyra¿eniem if
    if(b) System.out.println("To zosta³o wykonane.");

    b = false;
    if(b) System.out.println("To nie zosta³o wykonane.");

    // wynik operatora relacji jest wartoœci¹ logiczn¹
    System.out.println("10 > 9 to wartoœæ " + (10 > 9));
  }
}

Listing 6.
// Przyk³ad inicjalizacji dynamicznej.
class DynInit {
    public static void main(String args[]) {
      double a = 3.0, b = 4.0;
      
      // c jest inicjalizowane dynamicznie
      double c = Math.sqrt(a * a + b * b);

      System.out.println("D³ugoœæ przeciwprostok¹tnej wynosi " + c);
    }
}

Listing 7.
// Przyk³ad zasiêgu bloku.
class Scope {
  public static void main(String args[]) {
    int x; // widziany przez ca³y kod metody

    x = 10;
    if(x == 10) { // pocz¹tek nowego zasiêgu
      int y = 20; // o tej zmiennej wie tylko ten blok

      // tutaj znana jest zarówno zmienna x, jak i y
      System.out.println("x i y: " + x + " " + y);
      x = y * 2;
    }
    // y = 100; // B³¹d! Zmienna y nie jest znana.

    // nadal znamy wartoœæ zmiennej x
    System.out.println("x wynosi " + x);
  }
}

Listing 8.
// Przyk³ad czasu ¿ycia zmiennej.
class LifeTime {
  public static void main(String args[]) {
    int x;

    for(x = 0; x < 3; x++) {
      int y = -1; // y jest inicjalizowane przy ka¿dej iteracji pêtli
      System.out.println("y wynosi " + y); // zawsze zostanie wyœwietlone –1
      y = 100;
      System.out.println("teraz y wynosi " + y);
    }
  }
}

Listing 9.
// Ten program siê nie skompiluje.
class ScopeErr {
   public static void main(String args[]) {
     int bar = 1;
     {              // tworzy nowy zasiêg
       int bar = 2; // B³¹d kompilacji -- zmienna bar jest ju¿ zadeklarowana!
     }
   }
}


Listing 10.
// Przyk³ady rzutowania.
class Conversion {
  public static void main(String args[]) {
    byte b;
    int i = 257;
    double d = 323.142;

    System.out.println("\nKonwersja z int na byte.");
    b = (byte) i;
    System.out.println("i oraz b " + i + " " + b);

    System.out.println("\nKonwersja z double na int.");
    i = (int) d;
    System.out.println("d oraz i " + d + " " + i);

    System.out.println("\nKonwersja z double na byte.");
    b = (byte) d;
    System.out.println("d oraz b " + d + " " + b);
  }
}

Listing 11.
class Promote {
  public static void main(String args[]) {
    byte b = 42;
    char c = 'a';
    short s = 1024;
    int i = 50000;
    float f = 5.67f;
    double d = .1234;
    double result = (f * b) + (i / c) - (d * s);
    System.out.println((f * b) + " + " + (i / c) + " - " + (d * s));
    System.out.println("wynik = " + result);
  }
}

Listing 12.
// Przyk³ad tablicy jednowymiarowej.
class Array {
  public static void main(String args[]) {
    int month_days[];
    month_days = new int[12];
    month_days[0] = 31;
    month_days[1] = 28;
    month_days[2] = 31;
    month_days[3] = 30;
    month_days[4] = 31;
    month_days[5] = 30;
    month_days[6] = 31;
    month_days[7] = 31;
    month_days[8] = 30;
    month_days[9] = 31;
    month_days[10] = 30;
    month_days[11] = 31;
    System.out.println("Kwiecieñ ma " + month_days[3] + " dni.");
  }
}

Listing 13.
// Ulepszona wersja poprzedniego programu.
class AutoArray {
  public static void main(String args[]) {
    int month_days[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31,
                         30, 31 };
    System.out.println("Kwiecieñ ma " + month_days[3] + " dni.");
  }
}

Listing 14.
// Œrednia wartoœci znajduj¹cych siê w tablicy.
class Average {
  public static void main(String args[]) {
    double nums[] = {10.1, 11.2, 12.3, 13.4, 14.5};
    double result = 0;
    int i;

    for(i=0; i<5; i++)
      result = result + nums[i];

    System.out.println("Œrednia wynosi " + result / 5);
  }
}

Listing 15.
// Przyk³ad tablicy dwuwymiarowej.
class TwoDArray {
  public static void main(String args[]) {
    int twoD[][]= new int[4][5];
    int i, j, k = 0;
    for(i=0; i<4; i++)
      for(j=0; j<5; j++) {
        twoD[i][j] = k;
        k++;
      }

    for(i=0; i<4; i++) {
      for(j=0; j<5; j++)
        System.out.print(twoD[i][j] + " ");
      System.out.println();
    }
  }
}


Listing 16.
// Rêczna alokacja ró¿nych rozmiarów dla drugiego wymiaru.
class TwoDAgain {
  public static void main(String args[]) {
    int twoD[][] = new int[4][];
    twoD[0] = new int[1];
    twoD[1] = new int[2];
    twoD[2] = new int[3];
    twoD[3] = new int[4];

    int i, j, k = 0;

    for(i=0; i<4; i++)
      for(j=0; j<i+1; j++) {
        twoD[i][j] = k;
        k++;
      }

    for(i=0; i<4; i++) {
      for(j=0; j<i+1; j++)
        System.out.print(twoD[i][j] + " ");
      System.out.println();
    }
  }
}

Listing 17.
// Inicjalizacja tablicy wielowymiarowej.
class Matrix {
  public static void main(String args[]) {
    double m[][] = {
      { 0*0, 1*0, 2*0, 3*0 },
      { 0*1, 1*1, 2*1, 3*1 },
      { 0*2, 1*2, 2*2, 3*2 },
      { 0*3, 1*3, 2*3, 3*3 }
    };
    int i, j;

    for(i=0; i<4; i++) {
      for(j=0; j<4; j++)
        System.out.print(m[i][j] + " ");
      System.out.println();
    }
  }
}

Listing 18.
// Przyk³ad tablicy trójwymiarowej.
class ThreeDMatrix {
  public static void main(String args[]) {
    int threeD[][][] = new int[3][4][5];
    int i, j, k;

    for(i=0; i<3; i++)
      for(j=0; j<4; j++)
        for(k=0; k<5; k++)
          threeD[i][j][k] = i * j * k;

    for(i=0; i<3; i++) {
      for(j=0; j<4; j++) {
        for(k=0; k<5; k++)
          System.out.print(threeD[i][j][k] + " ");
        System.out.println();
      }
      System.out.println();
    }
  }
}

