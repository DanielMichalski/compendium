Listing 1.
// Demonstruje u¿ycie klasy InetAddress.
import java.net.*;

class InetAddressTest 
{
  public static void main(String args[]) throws UnknownHostException {
    InetAddress Address = InetAddress.getLocalHost();
    System.out.println(Address);

    Address = InetAddress.getByName("www.HerbSchildt.com");
    System.out.println(Address);

    InetAddress SW[] = InetAddress.getAllByName("www.nba.com");
    for (int i=0; i<SW.length; i++)
      System.out.println(SW[i]);
  }
}

Listing 2.
// Przyk³ad u¿ycia gniazd.
import java.net.*;
import java.io.*;


class Whois {
  public static void main(String args[]) throws Exception {
    int c;

    // Tworzy gniazdo po³¹czone z serwerem internic.net (port 43).
    Socket s = new Socket("whois.internic.net", 43);

    // Uzyskuje obiekty strumieni wejœciowego i wyjœciowego.
    InputStream in = s.getInputStream();
    OutputStream out = s.getOutputStream();

    // Konstruuje ³añcuch ¿¹dania.
    String str = (args.length == 0 ? "MHProfessional.com" : args[0]) + "\n";

    // Konwertuje ten ³añcuch na tablicê bajtów.
    byte buf[] = str.getBytes();

    // Wysy³a ¿¹danie.
    out.write(buf);

    // Odczytuje i wyœwietla odpowiedŸ.
    while ((c = in.read()) != -1) {
      System.out.print((char) c);
    }
    s.close();
  }
}

Listing 3.
// Demonstruje u¿ycie klasy URL.
import java.net.*;
class URLDemo {
  public static void main(String args[]) throws MalformedURLException {
    URL hp = new URL (http://www.HerbSchildt.com/Articles");

    System.out.println("Protokó³: " + hp.getProtocol());
    System.out.println("Port: " + hp.getPort());

    System.out.println("Komputer: " + hp.getHost());
    System.out.println("Plik: " + hp.getFile());
    System.out.println("Pe³ny adres: " + hp.toExternalForm());
  }
}

Listing 4.
// Demonstruje u¿ycie klasy URLConnection.
import java.net.*;
import java.io.*;
import java.util.Date;

class UCDemo 
{
  public static void main(String args[]) throws Exception {
    int c;
    URL hp = new URL("http://www.internic.net");
    URLConnection hpCon = hp.openConnection();

    // pobiera datê
    long d = hpCon.getDate(); 
    if(d==0)
      System.out.println("Brak informacji o dacie.");
    else
      System.out.println("Data: " + new Date(d));

    // pobiera rodzaj zawartoœci
    System.out.println("Rodzaj zawartoœci: " + hpCon.getContentType());

    // pobiera datê wa¿noœci
    d = hpCon.getExpiration(); 
    if(d==0)
      System.out.println("Brak informacji o dacie wa¿noœci.");
    else
      System.out.println("Wygasa: " + new Date(d));

    // pobiera datê ostatniej modyfikacji
    d = hpCon.getLastModified(); 
    if(d==0)
      System.out.println("Brak informacji o dacie ostatniej modyfikacji.");
    else
      System.out.println("Ostatnio zmodyfikowany: " + new Date(d));

    // pobiera d³ugoœæ zawartoœci
    int len = hpCon.getContentLength();
    if(len == -1)
      System.out.println("D³ugoœæ zawartoœci niedostêpna.");
    else
      System.out.println("D³ugoœæ zawartoœci: " + len);

    if(len != 0) {
      System.out.println("=== Zawartoœæ ===");
      InputStream input = hpCon.getInputStream();
      int i = len;
      while (((c = input.read()) != -1)) { // && (--i > 0)) {
        System.out.print((char) c);
      }
      input.close();

    } else {
      System.out.println("Brak dostêpnej zawartoœci.");
    }

  }
}

Listing 5.
// Przyk³ad u¿ycia klasy HttpURLConnection.
import java.net.*;
import java.io.*;
import java.util.*;

class HttpURLDemo
{

  public static void main(String args[]) throws Exception {
    URL hp = new URL(http://www.google.com");

    HttpURLConnection hpCon = (HttpURLConnection) hp.openConnection();

    // Wyœwietla metodê ¿¹dania.
    System.out.println("Metoda ¿¹dania: " +
                       hpCon.getRequestMethod());

    // Wyœwietla kod odpowiedzi.
    System.out.println("Kod odpowiedzi " +
                       hpCon.getResponseCode());

    // Wyœwietla komunikat odpowiedzi.
    System.out.println("Komunikat odpowiedzi: " +
                       hpCon.getResponseMessage());

    // Uzyskuje listê pól nag³ówka oraz zbiór
    // kluczy nag³ówka.
    Map<String, List<String>> hdrMap = hpCon.getHeaderFields();
    Set<String> hdrField = hdrMap.keySet();

    System.out.println("\nOto nag³ówek:");

    // Wyœwietla wszystkie klucze i wartoœci nag³ówka.
    for(String k : hdrField) {
      System.out.println("Klucz: " + k +
                         " Wartoœæ: " + hdrMap.get(k));
    }
  }
}

Listing 6.
// Demonstruje u¿ycie datagramów.
import java.net.*;

class WriteServer {
  public static int serverPort = 998;
  public static int clientPort = 999;
  public static int buffer_size = 1024;
  public static DatagramSocket ds;
  public static byte buffer[] = new byte[buffer_size];

  public static void TheServer() throws Exception {
    int pos=0;
    while (true) {
      int c = System.in.read();
      switch (c) {
        case -1: 
          System.out.println("Serwer koñczy pracê.");
          return;
        case '\r': 
          break;
        case '\n':
          ds.send(new DatagramPacket(buffer,pos,
             InetAddress.getLocalHost(),clientPort));
          pos=0;
          break;
        default:
          buffer[pos++] = (byte) c;
      }
    }
  }

  public static void TheClient() throws Exception {
    while(true) {
      DatagramPacket p = new DatagramPacket(buffer, buffer.length);
      ds.receive(p);
      System.out.println(new String(p.getData(), 0, p.getLength()));
    }
  }

  public static void main(String args[]) throws Exception {
    if(args.length == 1) {
      ds = new DatagramSocket(serverPort);
      TheServer();
    } else {
      ds = new DatagramSocket(clientPort);
      TheClient();
    }
  }
}

