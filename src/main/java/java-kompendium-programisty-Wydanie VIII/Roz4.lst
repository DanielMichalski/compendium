Listing 1.
// Przyk³ad u¿ycia podstawowych operatorów arytmetycznych.
class BasicMath {
  public static void main(String args[]) {
    // arytmetyka liczb ca³kowitych
    System.out.println("Arytmetyka liczb ca³kowitych");
    int a = 1+1;
    int b = a * 3;
    int c = b / 4;
    int d = c - a;
    int e = -d;
    System.out.println("a = "+a);
    System.out.println("b = "+b);
    System.out.println("c = "+c);
    System.out.println("d = "+d);
    System.out.println("e = "+e);

    // arytmetyka liczb zmiennoprzecinkowych
    System.out.println("\nArytmetyka liczb zmiennoprzecinkowych");
    double da = 1+1;
    double db = da * 3;
    double dc = db / 4;
    double dd = dc - a;
    double de = -dd;
    System.out.println("da = "+da);
    System.out.println("db = "+db);
    System.out.println("dc = "+dc);
    System.out.println("dd = "+dd);
    System.out.println("de = "+de);
  }
}

Listing 2.
// Przyk³ad u¿ycia operatora %.
class Modulus {
  public static void main(String args[]) {
    int x = 42;
    double y = 42.25;

    System.out.println("x modulo 10 = "+x % 10);
    System.out.println("y modulo 10 = "+y % 10);
  }
}

Listing 3.
// Przyk³ad u¿ycia kilku operatorów arytmetycznych z przypisaniem.
class OpEquals {
  public static void main(String args[]) {
    int a = 1;
    int b = 2;
    int c = 3;

    a += 5;
    b *= 4;
    c += a * b;
    c %= 6;
    System.out.println("a = "+a);
    System.out.println("b = "+b);
    System.out.println("c = "+c);
  }
}

Listing 4.
// Przyk³ad u¿ycia operatora ++.
class IncDec {
  public static void main(String args[]) {
    int a = 1;
    int b = 2;
    int c;
    int d;
    c = ++b;
    d = a++;
    c++;
    System.out.println("a = "+a);
    System.out.println("b = "+b);
    System.out.println("c = "+c);
    System.out.println("d = "+d);
  }
}

Listing 5.
// Przyk³ad u¿ycia operatorów bitowych.
class BitLogic {
  public static void main(String args[]) {
    String binary[] = {
      "0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111",
      "1000", "1001", "1010", "1011", "1100", "1101", "1110", "1111"
    };
    int a = 3; // 0+2+1 lub 0011 binarnie
    int b = 6; // 4+2+0 lub 0110 binarnie
    int c = a | b;
    int d = a & b;
    int e = a ^ b;
    int f = (~a & b) | (a & ~b);
    int g = ~a & 0x0f;

    System.out.println("        a = "+binary[a]);
    System.out.println("        b = "+binary[b]);
    System.out.println("      a|b = "+binary[c]);
    System.out.println("      a&b = "+binary[d]);
    System.out.println("      a^b = "+binary[e]);
    System.out.println("~a&b|a&~b = "+binary[f]);
    System.out.println("       ~a = "+binary[g]);
  }
}

Listing 6.
// Przesuniêcie bajta w lewo.
class ByteShift {
  public static void main(String args[]) {
    byte a = 64, b;
    int i;

    i = a << 2;
    b = (byte) (a << 2);

    System.out.println("Oryginalna wartoœæ a: "+a);
    System.out.println("i oraz b: "+i+" "+b);
  }
}

Listing 7.
// Przesuniêcie w lewo to szybszy sposób mno¿enia przez 2.
class MultByTwo {
  public static void main(String args[]) {
    int i;
    int num = 0xFFFFFFE;

    for(i=0; i<4; i++) {
      num = num << 1;
      System.out.println(num);
    }
  }
}

Listing 8.
// Maskowanie bitu znaku.
class HexByte {
  static public void main(String args[]) {
    char hex[] = {
      '0', '1', '2', '3', '4', '5', '6', '7',
      '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'
    };
    byte b = (byte) 0xf1;

    System.out.println("b = 0x"+hex[(b >> 4) & 0x0f]+hex[b & 0x0f]);
  }
}

Listing 9.
// Przesuniêcie bajta bez znaku.
class ByteUShift {
  static public void main(String args[]) {
    char hex[] = {
      '0', '1', '2', '3', '4', '5', '6', '7',
      '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'
    };
    byte b = (byte) 0xf1;
    byte c = (byte) (b >> 4);
    byte d = (byte) (b >>> 4);
    byte e = (byte) ((b & 0xff) >> 4);

    System.out.println("              b = 0x"
     +hex[(b >> 4) & 0x0f]+hex[b & 0x0f]);
    System.out.println("         b >> 4 = 0x"
     +hex[(c >> 4) & 0x0f]+hex[c & 0x0f]);
    System.out.println("        b >>> 4 = 0x"
     +hex[(d >> 4) & 0x0f]+hex[d & 0x0f]);
    System.out.println("(b & 0xff) >> 4 = 0x"
     +hex[(e >> 4) & 0x0f]+hex[e & 0x0f]);
  }
}

Listing 10.
class OpBitEquals {
  public static void main(String args[]) {
    int a = 1;
    int b = 2;
    int c = 3;

    a |= 4;
    b >>= 1;
    c <<= 1;
    a ^= c;
    System.out.println("a = "+a);
    System.out.println("b = "+b);
    System.out.println("c = "+c);
  }
}

Listing 11.
// Przyk³ad u¿ycia operatorów logicznych.
class BoolLogic {
  public static void main(String args[]) {
    boolean a = true;
    boolean b = false;
    boolean c = a | b;
    boolean d = a & b;
    boolean e = a ^ b;
    boolean f = (!a & b) | (a & !b);
    boolean g = !a;

    System.out.println("        a = "+a);
    System.out.println("        b = "+b);
    System.out.println("      a|b = "+c);
    System.out.println("      a&b = "+d);
    System.out.println("      a^b = "+e);
    System.out.println("!a&b|a&!b = "+f);
    System.out.println("       !a = "+g);
  }
}

Listing 12.
// Przyk³ad u¿ycia operatora trójargumentowego.
class Ternary {
  public static void main(String args[]) {
    int i, k;

    i = 10;
    k = i < 0 ? -i : i; // pobierz wartoœæ bezwzglêdn¹ z i
    System.out.print("Wartoœæ bezwzglêdna z ");
    System.out.println(i+" wynosi "+k);

    i = -10;
    k = i < 0 ? -i : i; // pobierz wartoœæ bezwzglêdn¹ z i
    System.out.print("Wartoœæ bezwzglêdna z ");
    System.out.println(i+" wynosi "+k);
  }
}

