Listing 1.
// Demonstruje etykiety 
import java.awt.*; 
import java.applet.*;
/* 
<applet code="LabelDemo" width=300 height=200> 
</applet> 
 */

public class LabelDemo extends Applet {

    public void init() {
        Label one = new Label("Jeden");
        Label two = new Label("Dwa");
        Label three = new Label("Trzy");

// dodaje etykiety do okna apletu 
        add(one);
        add(two);
        add(three);
    }
}
Listing 2.
// Demonstruje przyciski 
import java.awt.*; 
import java.awt.event.*; 


import java.applet.*; 
/* 
<applet code="ButtonDemo" width=250 height=150> 
</applet> 
*/ 

public class ButtonDemo extends Applet implements ActionListener {

    String msg = "";
    Button yes, no, maybe;

    public void init() {
        yes = new Button("Tak");
        no = new Button("Nie");
        maybe = new Button("Niezdecydowany");

        add(yes);
        add(no);
        add(maybe);

        yes.addActionListener(this);
        no.addActionListener(this);
        maybe.addActionListener(this);
    }

    public void actionPerformed(ActionEvent ae) {
        String str = ae.getActionCommand();
        if (str.equals("Tak")) {
            msg = "Nacisn¹³eœ Tak.";
        } else if (str.equals("Nie")) {
            msg = "Nacisn¹³eœ Nie.";
        } else {
            msg = "Nacisn¹³eœ Niezdecydowany.";
        }

        repaint();
    }

    public void paint(Graphics g) {
        g.drawString(msg, 6, 100);
    }
}
Listing 3.
// Rozpoznawanie obiektów klasy Button. 
import java.awt.*; 
import java.awt.event.*; 


import java.applet.*; 
/* 
<applet code="ButtonList" width=250 height=150> 
</applet> 
*/ 

public class ButtonList extends Applet implements ActionListener {

    String msg = "";
    Button bList[] = new Button[3];

    public void init() {
        Button yes = new Button("Tak");
        Button no = new Button("Nie");
        Button maybe = new Button("Niezdecydowany");

// zapisuje referencje do dodawanych przycisków 
        bList[0] = (Button) add(yes);
        bList[1] = (Button) add(no);
        bList[2] = (Button) add(maybe);

// rejestruje odbiorcê zdarzeñ akcji 
        for (int i = 0; i < 3; i++) {
            bList[i].addActionListener(this);
        }
    }

    public void actionPerformed(ActionEvent ae) {
        for (int i = 0; i < 3; i++) {
            if (ae.getSource() == bList[i]) {
                msg = "Nacisn¹³eœ " + bList[i].getLabel();
            }
        }
        repaint();
    }

    public void paint(Graphics g) {
        g.drawString(msg, 6, 100);
    }
}
Listing 4.
// Demonstruje pola wyboru. 
import java.awt.*; 
import java.awt.event.*; 


import java.applet.*; 
/* 
<applet code="CheckboxDemo" width=240 height=200> 
</applet> 
*/ 

public class CheckboxDemo extends Applet implements ItemListener {

    String msg = "";
    Checkbox winXP, win7, solaris, mac;

    public void init() {
        winXP = new Checkbox("Windows XP", null, true);
        win7 = new Checkbox("Windows 7");
        solaris = new Checkbox("Solaris");
        mac = new Checkbox("Mac OS");

        add(winXP);
        add(win7);
        add(solaris);
        add(mac);

        winXP.addItemListener(this);
        win7.addItemListener(this);
        solaris.addItemListener(this);
        mac.addItemListener(this);
    }

    public void itemStateChanged(ItemEvent ie) {
        repaint();
    }

// Wyœwietla bie¿¹cy stan pól wyboru. 
    public void paint(Graphics g) {
        msg = "Bie¿¹cy stan: ";
        g.drawString(msg, 6, 80);
        msg = " Windows XP: " + winXP.getState();
        g.drawString(msg, 6, 100);
        msg = " Windows 7: " + win7.getState();
        g.drawString(msg, 6, 120);
        msg = " Solaris: " + solaris.getState();
        g.drawString(msg, 6, 140);
        msg = " Mac OS: " + mac.getState();
        g.drawString(msg, 6, 160);
    }
}
Listing 5.
// Demonstruje grupê pól wyboru. 
import java.awt.*; 
import java.awt.event.*; 


import java.applet.*; 
/* 
<applet code="CBGroup" width=240 height=200> 
</applet> 
*/ 

public class CBGroup extends Applet implements ItemListener {

    String msg = "";
    Checkbox winXP, win7, solaris, mac;
    CheckboxGroup cbg;

    public void init() {
        cbg = new CheckboxGroup();
        winXP = new Checkbox("Windows XP", cbg, true);
        win7 = new Checkbox("Windows 7", cbg, false);
        solaris = new Checkbox("Solaris", cbg, false);
        mac = new Checkbox("Mac OS", cbg, false);

        add(winXP);
        add(win7);
        add(solaris);
        add(mac);

        winXP.addItemListener(this);
        win7.addItemListener(this);
        solaris.addItemListener(this);
        mac.addItemListener(this);
    }

    public void itemStateChanged(ItemEvent ie) {
        repaint();
    }

// Wyœwietla bie¿¹cy stan pól wyboru. 
    public void paint(Graphics g) {
        msg = "Bie¿¹cy wybór: ";
        msg += cbg.getSelectedCheckbox().getLabel();
        g.drawString(msg, 6, 100);
    }
}
Listing 6.
// Demonstruje listy wyboru. 
import java.awt.*; 
import java.awt.event.*; 


import java.applet.*; 
/* 
<applet code="ChoiceDemo" width=300 height=180> 
</applet> 
*/ 

public class ChoiceDemo extends Applet implements ItemListener {

    Choice os, browser;
    String msg = "";

    public void init() {
        os = new Choice();
        browser = new Choice();

// dodaje elementy do listy os 
        os.add("Windows XP");
        os.add("Windows 7");
        os.add("Solaris");
        os.add("Mac OS");

// dodaje elementy do listy browser 
        browser.add("Internet Explorer");
        browser.add("Firefox");
        browser.add("Opera");

// dodaje listy wyboru do okna 
        add(os);
        add(browser);

// rejestruje odbiorcê zdarzeñ elementów 
        os.addItemListener(this);
        browser.addItemListener(this);
    }

    public void itemStateChanged(ItemEvent ie) {
        repaint();
    }

// Wyœwietla bie¿¹cy wybór. 
    public void paint(Graphics g) {
        msg = "Aktualnie wybrany system: ";
        msg += os.getSelectedItem();
        g.drawString(msg, 6, 120);
        msg = "Wybrana przegl¹darka: ";
        msg += browser.getSelectedItem();
        g.drawString(msg, 6, 140);
    }
}
Listing 7.
// Demonstruje listy. 
import java.awt.*; 
import java.awt.event.*; 


import java.applet.*; 
/* 
<applet code="ListDemo" width=300 height=180> 
</applet> 
*/ 

public class ListDemo extends Applet implements ActionListener {

    List os, browser;
    String msg = "";

    public void init() {
        os = new List(4, true);
        browser = new List(4, false);

// dodaje elementy do listy os 
        os.add("Windows XP");
        os.add("Windows 7");
        os.add("Solaris");
        os.add("Mac OS");

// dodaje elementy do listy browser 
        browser.add("Internet Explorer");
        browser.add("Firefox");
        browser.add("Opera");

        browser.select(1);

// dodaje listy do okna 
        add(os);
        add(browser);

// rejestruje odbiorcê zdarzeñ akcji 
        os.addActionListener(this);
        browser.addActionListener(this);
    }

    public void actionPerformed(ActionEvent ae) {
        repaint();
    }

// Wyœwietla bie¿¹cy wybór. 
    public void paint(Graphics g) {
        int idx[];

        msg = "Aktualnie wybrany system: ";
        idx = os.getSelectedIndexes();
        for (int i = 0; i < idx.length; i++) {
            msg += os.getItem(idx[i]) + " ";
        }
        g.drawString(msg, 6, 120);
        msg = "Wybrana przegl¹darka: ";
        msg += browser.getSelectedItem();
        g.drawString(msg, 6, 140);
    }
}
Listing 8.
// Demonstruje paski przewijania. 
import java.awt.*; 
import java.awt.event.*; 


import java.applet.*; 
/* 
<applet code="SBDemo" width=300 height=200> 
</applet> 
*/ 

public class SBDemo extends Applet
        implements AdjustmentListener, MouseMotionListener {

    String msg = "";
    Scrollbar vertSB, horzSB;

    public void init() {
        int width = Integer.parseInt(getParameter("width"));
        int height = Integer.parseInt(getParameter("height"));

        vertSB = new Scrollbar(Scrollbar.VERTICAL,
                0, 1, 0, height);
        vertSB.setPreferredSize(new Dimension(20, 100));
        horzSB = new Scrollbar(Scrollbar.HORIZONTAL,
                0, 1, 0, width);
        horzSB.setPreferredSize(new Dimension(100, 20));
        add(vertSB);
        add(horzSB);

// rejestruje odbiorcê zdarzeñ dostosowania 
        vertSB.addAdjustmentListener(this);
        horzSB.addAdjustmentListener(this);

        addMouseMotionListener(this);
    }

    public void adjustmentValueChanged(AdjustmentEvent ae) {
        repaint();
    }

// Aktualizuje paski przewijania w odpowiedzi na przeci¹ganie kursora myszy. 
    public void mouseDragged(MouseEvent me) {
        int x = me.getX();
        int y = me.getY();
        vertSB.setValue(y);
        horzSB.setValue(x);
        repaint();
    }

// Metoda wymagana w przypadku MouseMotionListener 
    public void mouseMoved(MouseEvent me) {
    }

// Wyœwietla bie¿¹ce wartoœci pasków przewijania. 
    public void paint(Graphics g) {
        msg = "Pionowy: " + vertSB.getValue();
        msg += ", Poziomy: " + horzSB.getValue();
        g.drawString(msg, 6, 160);

// wyœwietla bie¿¹c¹ pozycjê przeci¹ganego kursora myszy 
        g.drawString("*", horzSB.getValue(),
                vertSB.getValue());
    }
}
Listing 9.
// Demonstruje pole tekstowe. 
import java.awt.*; 
import java.awt.event.*; 


import java.applet.*; 
/* 

<applet code="TextFieldDemo" width=380 height=150> 
</applet> 
*/ 

public class TextFieldDemo extends Applet
        implements ActionListener {

    TextField name, pass;

    public void init() {
        Label namep = new Label("Nazwa: ", Label.RIGHT);
        Label passp = new Label("Has³o: ", Label.RIGHT);
        name = new TextField(12);
        pass = new TextField(8);
        pass.setEchoChar('?');

        add(namep);
        add(name);
        add(passp);
        add(pass);

// rejestruje odbiorcê zdarzeñ akcji 
        name.addActionListener(this);
        pass.addActionListener(this);
    }

// U¿ytkownika nacisn¹³ Enter. 
    public void actionPerformed(ActionEvent ae) {
        repaint();
    }

    public void paint(Graphics g) {
        g.drawString("Nazwa: " + name.getText(), 6, 60);
        g.drawString("Zaznaczony tekst w polu nazwy: "
                + name.getSelectedText(), 6, 80);
        g.drawString("Has³o: " + pass.getText(), 6, 100);
    }
}
Listing 10.
// Demonstruje wielowierszowe pole tekstowe. 
import java.awt.*; 


import java.applet.*; 
/* 
<applet code="TextAreaDemo" width=300 height=250> 
</applet> 
*/ 

public class TextAreaDemo extends Applet {

    public void init() {
        String val =
                "Java 7 to najnowsza wersja najbardziej\n"
                + "popularnego jêzyka programowania aplikacji internetowych.\n"
                + "Zbudowana na bazie bogatego dziedzictwa, Java to najlepszy przyk³ad\n"
                + "po³¹czenia sztuki i nauki w œwiecie jêzyków komputerowych.\n\n"
                + "Jednym z powodów ogromnego sukcesu Javy jest jej\n"
                + "sta³a, nieustaj¹ca ewolucja. Twórcy Javy nigdy nie spoczêli na\n"
                + "laurach. Przeciwnie, Java stale jest dostosowywana do\n"
                + "dynamicznie zmieniaj¹cego siê œwiata aplikacji internetowych.\n"
                + "Co wiêcej, w³aœnie Java czêsto wyznacza kierunek,\n"
                + "którym pod¹¿aj¹ pozosta³e technologie.";

        TextArea text = new TextArea(val, 10, 30);
        add(text);
    }
}
Listing 11.
// U¿ycie mened¿era uk³adu FlowLayout z wyrównaniem do lewej strony. 
import java.awt.*; 
import java.awt.event.*; 


import java.applet.*; 
/* 
<applet code="FlowLayoutDemo" width=240 height=200> 
</applet> 
*/ 

public class FlowLayoutDemo extends Applet
        implements ItemListener {

    String msg = "";
    Checkbox winXP, win7, solaris, mac;

    public void init() {
// ustawia uk³ad FlowLayout z wyrównaniem do lewej strony 
        setLayout(new FlowLayout(FlowLayout.LEFT));

        winXP = new Checkbox("Windows XP", null, true);
        win7 = new Checkbox("Windows 7");
        solaris = new Checkbox("Solaris");
        mac = new Checkbox("Mac OS");

        add(winXP);
        add(win7);
        add(solaris);
        add(mac);

// rejestruje odbiorcê zdarzeñ elementów 
        winXP.addItemListener(this);
        win7.addItemListener(this);
        solaris.addItemListener(this);
        mac.addItemListener(this);
    }

// Ponownie rysuje okno po zmianie statusu pola wyboru. 
    public void itemStateChanged(ItemEvent ie) {
        repaint();
    }

// Wyœwietla bie¿¹cy stan pól wyboru. 
    public void paint(Graphics g) {

        msg = "Bie¿¹cy stan: ";
        g.drawString(msg, 6, 80);
        msg = " Windows XP: " + winXP.getState();
        g.drawString(msg, 6, 100);
        msg = " Windows 7: " + win7.getState();
        g.drawString(msg, 6, 120);
        msg = " Solaris: " + solaris.getState();
        g.drawString(msg, 6, 140);
        msg = " Mac: " + mac.getState();
        g.drawString(msg, 6, 160);
    }
}
Listing 12.
// Demonstruje mened¿er uk³adu BorderLayout. 
import java.awt.*; 
import java.applet.*; 


import java.util.*; 
/* 
<applet code="BorderLayoutDemo" width=400 height=200> 
</applet> 
*/ 

public class BorderLayoutDemo extends Applet {

    public void init() {
        setLayout(new BorderLayout());

        add(new Button("Przycisk zajmuj¹cy górn¹ czêœæ okna."),
                BorderLayout.NORTH);
        add(new Label("Komunikat w dolnej czêœci okna."),
                BorderLayout.SOUTH);
        add(new Button("Prawy"), BorderLayout.EAST);
        add(new Button("Lewy"), BorderLayout.WEST);

        String msg = "Ka¿dy rozs¹dny cz³owiek potrafi "
                + "dostosowaæ siê do otoczenia;\n"
                + "nierozs¹dni ludzie stale próbuj¹ "
                + "dostosowaæ otoczenie do siebie.\n"
                + "Postêp jest wiêc uzale¿niony od ludzi "
                + "nierozs¹dnych.\n\n"
                + " - George Bernard Shaw\n\n";

        add(new TextArea(msg), BorderLayout.CENTER);
    }
}
Listing 13.
// Demonstruje mened¿er uk³adu BorderLayout z obramowaniami. 
import java.awt.*; 
import java.applet.*; 


import java.util.*; 
/* 
<applet code="InsetsDemo" width=400 height=200> 
</applet> 
*/ 

public class InsetsDemo extends Applet {

    public void init() {
// ustawia kolor t³a, aby obramowania by³y bardziej widoczne 
        setBackground(Color.cyan);

        setLayout(new BorderLayout());

        add(new Button("Przycisk zajmuj¹cy górn¹ czêœæ okna."),
                BorderLayout.NORTH);
        add(new Label("Komunikat w dolnej czêœci okna."),
                BorderLayout.SOUTH);
        add(new Button("Prawy"), BorderLayout.EAST);
        add(new Button("Left"), BorderLayout.WEST);

        String msg = "Ka¿dy rozs¹dny cz³owiek potrafi "
                + "dostosowaæ siê do otoczenia;\n"
                + "nierozs¹dni ludzie stale próbuj¹ "
                + "dostosowaæ otoczenie do siebie.\n"
                + "Postêp jest wiêc uzale¿niony od ludzi "
                + "nierozs¹dnych.\n\n"
                + " - George Bernard Shaw\n\n";

        add(new TextArea(msg), BorderLayout.CENTER);
    }
// dodaje obramowania 
    public Insets getInsets() {
        return new Insets(10, 10, 10, 10);
    }
}
Listing 14.
// Demonstruje mened¿er uk³adu GridLayout 
import java.awt.*; 


import java.applet.*; 
/* 
<applet code="GridLayoutDemo" width=300 height=200> 
</applet> 
*/ 

public class GridLayoutDemo extends Applet {

    static final int n = 4;

    public void init() {
        setLayout(new GridLayout(n, n));

        setFont(new Font("SansSerif", Font.BOLD, 24));

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int k = i * n + j;
                if (k > 0) {
                    add(new Button("" + k));
                }
            }
        }
    }
}
Listing 15.
// Demonstruje mened¿er uk³adu CardLayout. 
import java.awt.*; 
import java.awt.event.*; 


import java.applet.*; 
/* 
<applet code="CardLayoutDemo" width=300 height=100> 
</applet> 
*/ 

public class CardLayoutDemo extends Applet
        implements ActionListener, MouseListener {

    Checkbox winXP, win7, solaris, mac;
    Panel osCards;
    CardLayout cardLO;
    Button Win, Other;

    public void init() {
        Win = new Button("Windows");
        Other = new Button("Inny");
        add(Win);
        add(Other);

        cardLO = new CardLayout();
        osCards = new Panel();
        osCards.setLayout(cardLO); // ustawia uk³ad CardLayout dla panelu 

        winXP = new Checkbox("Windows XP", null, true);
        win7 = new Checkbox("Windows 7");
        solaris = new Checkbox("Solaris");
        mac = new Checkbox("Mac OS");

// dodaje do panelu pola wyboru dla systemów Windows 
        Panel winPan = new Panel();
        winPan.add(winXP);
        winPan.add(win7);

// dodaje do panelu pola wyboru dla pozosta³ych systemów 
        Panel otherPan = new Panel();
        otherPan.add(solaris);
        otherPan.add(mac);

// dodaje panele do panelu w uk³adzie CardLayout 
        osCards.add(winPan, "Windows");
        osCards.add(otherPan, "Other");

// dodaje karty do g³ównego panelu apletu 
        add(osCards);

// rejestruje odbiorcê zdarzeñ akcji 
        Win.addActionListener(this);
        Other.addActionListener(this);

// rejestruje zdarzenia myszy 
        addMouseListener(this);
    }

// Prze³¹cza panele. 
    public void mousePressed(MouseEvent me) {
        cardLO.next(osCards);
    }

// Puste implementacje dla pozosta³ych metod MouseListener. 
    public void mouseClicked(MouseEvent me) {
    }

    public void mouseEntered(MouseEvent me) {
    }

    public void mouseExited(MouseEvent me) {
    }

    public void mouseReleased(MouseEvent me) {
    }

    public void actionPerformed(ActionEvent ae) {
        if (ae.getSource() == Win) {

            cardLO.show(osCards, "Windows");
        } else {
            cardLO.show(osCards, "Other");
        }
    }
}
Listing 16.
// Przyk³ad u¿ycia mened¿era GridBagLayout. 
import java.awt.*; 
import java.awt.event.*; 


import java.applet.*; 
/* 
<applet code="GridBagDemo" width=250 height=200> 
</applet> 
*/ 

public class GridBagDemo extends Applet
        implements ItemListener {

    String msg = "";
    Checkbox winXP, win7, solaris, mac;

    public void init() {
        GridBagLayout gbag = new GridBagLayout();
        GridBagConstraints gbc = new GridBagConstraints();
        setLayout(gbag);

// Definiuje pola wyboru. 
        winXP = new Checkbox("Windows XP ", null, true);
        win7 = new Checkbox("Windows 7");
        solaris = new Checkbox("Solaris");
        mac = new Checkbox("Mac OS");

// Definiuje uk³ad komponentów. 

// W pierwszym wierszu stosuje domyœln¹ szerokoœæ równ¹ 0. 
        gbc.weightx = 1.0; // stosuje szerokoœæ kolumny równ¹ 1 
        gbc.ipadx = 200; // dope³nienie o 200 jednostek 
        gbc.insets = new Insets(4, 4, 0, 0); // obramowanie nieznacznie przesuniête wzglêdem lewego, górnego naro¿nika 

        gbc.anchor = GridBagConstraints.NORTHEAST;

        gbc.gridwidth = GridBagConstraints.RELATIVE;
        gbag.setConstraints(winXP, gbc);

        gbc.gridwidth = GridBagConstraints.REMAINDER;
        gbag.setConstraints(win7, gbc);

// Drugi wiersz ma szerokoœæ równ¹ 1. 
        gbc.weighty = 1.0;

        gbc.gridwidth = GridBagConstraints.RELATIVE;
        gbag.setConstraints(solaris, gbc);

        gbc.gridwidth = GridBagConstraints.REMAINDER;
        gbag.setConstraints(mac, gbc);

// Dodaje komponenty. 
        add(winXP);
        add(win7);
        add(solaris);
        add(mac);

// Rejestruje odbiorcê zdarzeñ elementów. 
        winXP.addItemListener(this);
        win7.addItemListener(this);
        solaris.addItemListener(this);
        mac.addItemListener(this);
    }

// Ponownie rysuje okno po zmianie statusu pola wyboru. 
    public void itemStateChanged(ItemEvent ie) {
        repaint();
    }

// Wyœwietla bie¿¹cy stan pól wyboru. 
    public void paint(Graphics g) {
        msg = "Bie¿¹cy stan: ";
        g.drawString(msg, 6, 80);
        msg = " Windows XP: " + winXP.getState();
        g.drawString(msg, 6, 100);
        msg = " Windows 7: " + win7.getState();
        g.drawString(msg, 6, 120);
        msg = " Solaris: " + solaris.getState();
        g.drawString(msg, 6, 140);
        msg = " Mac: " + mac.getState();
        g.drawString(msg, 6, 160);
    }
}
Listing 17.
// Ilustruje dzia³anie menu. 
import java.awt.*; 
import java.awt.event.*; 


import java.applet.*; 
/* 
<applet code="MenuDemo" width=250 height=250> 
</applet> 
*/ 

// Tworzy podklasê klasy Frame 
class MenuFrame extends Frame {

    String msg = "";
    CheckboxMenuItem debug, test;

    MenuFrame(String title) {
        super(title);

// tworzy pasek menu i dodaje go do ramki 
        MenuBar mbar = new MenuBar();
        setMenuBar(mbar);

// tworzy elementy menu 
        Menu file = new Menu("Plik");
        MenuItem item1, item2, item3, item4, item5;
        file.add(item1 = new MenuItem("Nowy..."));
        file.add(item2 = new MenuItem("Otwórz..."));
        file.add(item3 = new MenuItem("Zamknij"));
        file.add(item4 = new MenuItem("-"));
        file.add(item5 = new MenuItem("Wy³¹cz..."));
        mbar.add(file);

        Menu edit = new Menu("Edycja");
        MenuItem item6, item7, item8, item9;
        edit.add(item6 = new MenuItem("Wytnij"));
        edit.add(item7 = new MenuItem("Kopiuj"));
        edit.add(item8 = new MenuItem("Wklej"));
        edit.add(item9 = new MenuItem("-"));

        Menu sub = new Menu("Specjalne");
        MenuItem item10, item11, item12;
        sub.add(item10 = new MenuItem("Pierwsza"));
        sub.add(item11 = new MenuItem("Druga"));
        sub.add(item12 = new MenuItem("Trzecia"));
        edit.add(sub);

// opcje menu w formie pól wyboru 
        debug = new CheckboxMenuItem("Debugowanie");
        edit.add(debug);
        test = new CheckboxMenuItem("Testowanie");
        edit.add(test);

        mbar.add(edit);

// tworzy obiekt obs³uguj¹cy zdarzenia akcji i elementów 
        MyMenuHandler handler = new MyMenuHandler(this);
// rejestruje odbiorcê tych zdarzeñ 
        item1.addActionListener(handler);
        item2.addActionListener(handler);
        item3.addActionListener(handler);
        item4.addActionListener(handler);
        item5.addActionListener(handler);
        item6.addActionListener(handler);
        item7.addActionListener(handler);
        item8.addActionListener(handler);
        item9.addActionListener(handler);
        item10.addActionListener(handler);
        item11.addActionListener(handler);
        item12.addActionListener(handler);
        debug.addItemListener(handler);
        test.addItemListener(handler);

// tworzy obiekt obs³uguj¹cy zdarzenia okna 
        MyWindowAdapter adapter = new MyWindowAdapter(this);
// rejestruje odbiorcê tych zdarzeñ 
        addWindowListener(adapter);
    }

    public void paint(Graphics g) {
        g.drawString(msg, 10, 200);

        if (debug.getState()) {
            g.drawString("Debugowanie jest w³¹czone.", 10, 220);
        } else {
            g.drawString("Debugowanie jest wy³¹czone.", 10, 220);
        }

        if (test.getState()) {
            g.drawString("Testowanie jest w³¹czone.", 10, 240);
        } else {
            g.drawString("Testowanie jest wy³¹czone.", 10, 240);
        }
    }
}

class MyWindowAdapter extends WindowAdapter {

    MenuFrame menuFrame;

    public MyWindowAdapter(MenuFrame menuFrame) {
        this.menuFrame = menuFrame;
    }

    public void windowClosing(WindowEvent we) {
        menuFrame.setVisible(false);
    }
}

class MyMenuHandler implements ActionListener, ItemListener {

    MenuFrame menuFrame;

    public MyMenuHandler(MenuFrame menuFrame) {
        this.menuFrame = menuFrame;
    }
// Obs³uguje zdarzenia akcji 
    public void actionPerformed(ActionEvent ae) {
        String msg = "Wybra³eœ ";
        String arg = ae.getActionCommand();
        if (arg.equals("Nowy...")) {
            msg += "Nowy.";
        } else if (arg.equals("Otwórz...")) {
            msg += "Otwórz.";
        } else if (arg.equals("Zamknij")) {
            msg += "Zamknij.";
        } else if (arg.equals("Wy³¹cz...")) {
            msg += "Wy³¹cz.";
        } else if (arg.equals("Edytuj")) {
            msg += "Edytuj.";
        } else if (arg.equals("Wytnij")) {
            msg += "Wytnij.";
        } else if (arg.equals("Kopiuj")) {
            msg += "Kopiuj.";
        } else if (arg.equals("Wklej")) {
            msg += "Wklej.";
        } else if (arg.equals("Pierwsza")) {
            msg += "Pierwsza.";
        } else if (arg.equals("Druga")) {
            msg += "Druga.";
        } else if (arg.equals("Trzecia")) {
            msg += "Trzecia.";
        } else if (arg.equals("Debugowanie")) {
            msg += "Debugowanie.";
        } else if (arg.equals("Testowanie")) {
            msg += "Testowanie.";
        }
        menuFrame.msg = msg;
        menuFrame.repaint();
    }
// Obs³uguje zdarzenia elementów 
    public void itemStateChanged(ItemEvent ie) {
        menuFrame.repaint();
    }
}

// Tworzy okno ramki. 
public class MenuDemo extends Applet {

    Frame f;

    public void init() {
        f = new MenuFrame("Demo Menu");
        int width = Integer.parseInt(getParameter("width"));
        int height = Integer.parseInt(getParameter("height"));

        setSize(new Dimension(width, height));

        f.setSize(width, height);
        f.setVisible(true);
    }

    public void start() {
        f.setVisible(true);
    }

    public void stop() {
        f.setVisible(false);
    }
}
Listing 18.
// Demonstruje okno dialogowe. 
import java.awt.*; 
import java.awt.event.*; 


import java.applet.*; 
/* 
<applet code="DialogDemo" width=250 height=250> 
</applet> 
*/ 

// Tworzy podklasê klasy Dialog 
class SampleDialog extends Dialog implements ActionListener {

    SampleDialog(Frame parent, String title) {
        super(parent, title, false);
        setLayout(new FlowLayout());
        setSize(300, 200);

        add(new Label("Naciœnij ten przycisk:"));
        Button b;
        add(b = new Button("Anuluj"));
        b.addActionListener(this);
    }

    public void actionPerformed(ActionEvent ae) {
        dispose();
    }

    public void paint(Graphics g) {
        g.drawString("To jest okno dialogowe", 10, 70);
    }
}

// Tworzy podklasê klasy Frame. 
class MenuFrame extends Frame {

    String msg = "";
    CheckboxMenuItem debug, test;

    MenuFrame(String title) {
        super(title);

// tworzy pasek menu i dodaje go do ramki 
        MenuBar mbar = new MenuBar();
        setMenuBar(mbar);

// tworzy elementy menu 
        Menu file = new Menu("Plik");
        MenuItem item1, item2, item3, item4;
        file.add(item1 = new MenuItem("Nowy..."));
        file.add(item2 = new MenuItem("Otwórz..."));
        file.add(item3 = new MenuItem("Zamknij"));
        file.add(new MenuItem("-"));
        file.add(item4 = new MenuItem("Wy³¹cz..."));
        mbar.add(file);

        Menu edit = new Menu("Edycja");
        MenuItem item5, item6, item7;
        edit.add(item5 = new MenuItem("Wytnij"));
        edit.add(item6 = new MenuItem("Kopiuj"));
        edit.add(item7 = new MenuItem("Wklej"));
        edit.add(new MenuItem("-"));

        Menu sub = new Menu("Specjalne", true);
        MenuItem item8, item9, item10;
        sub.add(item8 = new MenuItem("Pierwsza"));
        sub.add(item9 = new MenuItem("Druga"));
        sub.add(item10 = new MenuItem("Trzecia"));
        edit.add(sub);

// opcje menu w formie pól wyboru 
        debug = new CheckboxMenuItem("Debugowanie");
        edit.add(debug);
        test = new CheckboxMenuItem("Testowanie");
        edit.add(test);

        mbar.add(edit);

// tworzy obiekt obs³uguj¹cy zdarzenia akcji i elementów 
        MyMenuHandler handler = new MyMenuHandler(this);
// rejestruje odbiorcê tych zdarzeñ 
        item1.addActionListener(handler);
        item2.addActionListener(handler);
        item3.addActionListener(handler);
        item4.addActionListener(handler);
        item5.addActionListener(handler);
        item6.addActionListener(handler);
        item7.addActionListener(handler);
        item8.addActionListener(handler);
        item9.addActionListener(handler);
        item10.addActionListener(handler);
        debug.addItemListener(handler);
        test.addItemListener(handler);

// tworzy obiekt obs³uguj¹cy zdarzenia okna 
        MyWindowAdapter adapter = new MyWindowAdapter(this);
// rejestruje odbiorcê tych zdarzeñ 
        addWindowListener(adapter);
    }

    public void paint(Graphics g) {
        g.drawString(msg, 10, 200);

        if (debug.getState()) {
            g.drawString("Debugowanie jest w³¹czone.", 10, 220);
        } else {
            g.drawString("Debugowanie jest wy³¹czone.", 10, 220);
        }

        if (test.getState()) {
            g.drawString("Testowanie jest w³¹czone.", 10, 240);
        } else {
            g.drawString("Testowanie jest wy³¹czone.", 10, 240);
        }
    }
}

class MyWindowAdapter extends WindowAdapter {

    MenuFrame menuFrame;

    public MyWindowAdapter(MenuFrame menuFrame) {
        this.menuFrame = menuFrame;
    }

    public void windowClosing(WindowEvent we) {
        menuFrame.dispose();
    }
}

class MyMenuHandler implements ActionListener, ItemListener {

    MenuFrame menuFrame;

    public MyMenuHandler(MenuFrame menuFrame) {
        this.menuFrame = menuFrame;
    }
// Obs³uguje zdarzenia akcji 
    public void actionPerformed(ActionEvent ae) {
        String msg = "Wybra³eœ ";
        String arg = ae.getActionCommand();
// Aktywuje okno dialogowe po wybraniu opcji Nowy. 
        if (arg.equals("Nowy...")) {
            msg += "Nowy.";
            SampleDialog d = new SampleDialog(menuFrame, "Nowe okno dialogowe");
            d.setVisible(true);
        } // Próbuje zdefiniowaæ pozosta³e okna dialogowe dla tych opcji. 
        else if (arg.equals("Otwórz...")) {
            msg += "Otwórz.";
        } else if (arg.equals("Zamknij")) {
            msg += "Zamknij.";
        } else if (arg.equals("Wy³¹cz...")) {
            msg += "Wy³¹cz.";
        } else if (arg.equals("Edytuj")) {
            msg += "Edytuj.";
        } else if (arg.equals("Wytnij")) {
            msg += "Wytnij.";
        } else if (arg.equals("Kopiuj")) {
            msg += "Kopiuj.";
        } else if (arg.equals("Wklej")) {
            msg += "Wklej.";
        } else if (arg.equals("Pierwsza")) {
            msg += "Pierwsza.";
        } else if (arg.equals("Drugaj")) {
            msg += "Druga.";
        } else if (arg.equals("Trzecia")) {
            msg += "Trzecia.";
        } else if (arg.equals("Debugowanie")) {
            msg += "Debugowanie.";
        } else if (arg.equals("Testowanie")) {
            msg += "Testowanie.";
        }
        menuFrame.msg = msg;
        menuFrame.repaint();
    }

    public void itemStateChanged(ItemEvent ie) {
        menuFrame.repaint();
    }
}

// Tworzy okno ramki. 
public class DialogDemo extends Applet {

    Frame f;

    public void init() {
        f = new MenuFrame("Demo Menu");
        int width = Integer.parseInt(getParameter("width"));
        int height = Integer.parseInt(getParameter("height"));

        setSize(width, height);

        f.setSize(width, height);
        f.setVisible(true);
    }

    public void start() {
        f.setVisible(true);
    }

    public void stop() {
        f.setVisible(false);
    }
}
Listing 19.
/* Demonstruje okno dialogowe wyboru pliku. 

Program jest aplikacj¹, nie apletem. 
*/ 
import java.awt.*; 


import java.awt.event.*; 

// Tworzy podklasê klasy Frame 
class SampleFrame extends Frame {

    SampleFrame(String title) {
        super(title);

// Usuwa okno po zamkniêciu. 
        addWindowListener(new WindowAdapter() {

            public void windowClosing(WindowEvent we) {
                System.exit(0);
            }
        });

    }
}

// Demonstruje dzia³anie klasy FileDialog. 
class FileDialogDemo {

    public static void main(String args[]) {
// Tworzy ramkê, do której bêdzie nale¿a³o to okno dialogowe. 
        Frame f = new SampleFrame("Demo okna dialogowego pliku");
        f.setVisible(true);
        f.setSize(100, 100);

        FileDialog fd = new FileDialog(f, "Okno dialogowe Plik");

        fd.setVisible(true);
    }
}
Listing 20.
/* 
* <applet code=ButtonDemo2 width=200 height=100> 
* </applet> 
*/ 
import java.awt.*; 
import java.awt.event.*; 


import java.applet.*; 

public class ButtonDemo2 extends Applet {

    MyButton myButton;
    static int i = 0;

    public void init() {
        myButton = new MyButton("Przycisk testowy");
        add(myButton);
    }

    class MyButton extends Button {

        public MyButton(String label) {
            super(label);
            enableEvents(AWTEvent.ACTION_EVENT_MASK);
        }

        protected void processActionEvent(ActionEvent ae) {
            showStatus("zdarzenie akcji: " + i++);
            super.processActionEvent(ae);
        }
    }
}
Listing 21.
/* 
* <applet code=CheckboxDemo2 width=300 height=100> 
* </applet> 
*/ 
import java.awt.*; 
import java.awt.event.*; 


import java.applet.*; 

public class CheckboxDemo2 extends Applet {

    MyCheckbox myCheckbox1, myCheckbox2, myCheckbox3;

    public void init() {
        myCheckbox1 = new MyCheckbox("Pierwszy element");
        add(myCheckbox1);
        myCheckbox2 = new MyCheckbox("Drugi element");
        add(myCheckbox2);
        myCheckbox3 = new MyCheckbox("Trzeci element");
        add(myCheckbox3);
    }

    class MyCheckbox extends Checkbox {

        public MyCheckbox(String label) {
            super(label);
            enableEvents(AWTEvent.ITEM_EVENT_MASK);
        }

        protected void processItemEvent(ItemEvent ie) {
            showStatus("Nazwa/stan pola wyboru: " + getLabel()
                    + "/" + getState());
            super.processItemEvent(ie);
        }
    }
}
Listing 22.
/* 
* <applet code=CheckboxGroupDemo2 width=300 height=100> 
* </applet> 
*/ 
import java.awt.*; 
import java.awt.event.*; 


import java.applet.*; 

public class CheckboxGroupDemo2 extends Applet {

    CheckboxGroup cbg;
    MyCheckbox myCheckbox1, myCheckbox2, myCheckbox3;

    public void init() {
        cbg = new CheckboxGroup();
        myCheckbox1 = new MyCheckbox("Pierwszy element", cbg, true);
        add(myCheckbox1);
        myCheckbox2 = new MyCheckbox("Drugi element", cbg, false);
        add(myCheckbox2);
        myCheckbox3 = new MyCheckbox("Trzeci element", cbg, false);
        add(myCheckbox3);
    }

    class MyCheckbox extends Checkbox {

        public MyCheckbox(String label, CheckboxGroup cbg,
                boolean flag) {
            super(label, cbg, flag);
            enableEvents(AWTEvent.ITEM_EVENT_MASK);
        }

        protected void processItemEvent(ItemEvent ie) {
            showStatus("Nazwa/stan pola wyboru: " + getLabel()
                    + "/" + getState());
            super.processItemEvent(ie);
        }
    }
}
Listing 23.
/* 
* <applet code=ChoiceDemo2 width=300 height=100> 
* </applet> 
*/ 
import java.awt.*; 
import java.awt.event.*; 


import java.applet.*; 

public class ChoiceDemo2 extends Applet {

    MyChoice choice;

    public void init() {
        choice = new MyChoice();
        choice.add("Czerwony");
        choice.add("Zielony");
        choice.add("Niebieski");
        add(choice);
    }

    class MyChoice extends Choice {

        public MyChoice() {
            enableEvents(AWTEvent.ITEM_EVENT_MASK);
        }

        protected void processItemEvent(ItemEvent ie) {
            showStatus("Aktualny wybór: " + getSelectedItem());
            super.processItemEvent(ie);
        }
    }
}
Listing 24.
/* 
* <applet code=ListDemo2 width=300 height=100> 
* </applet> 
*/ 
import java.awt.*; 
import java.awt.event.*; 


import java.applet.*; 

public class ListDemo2 extends Applet {

    MyList list;

    public void init() {
        list = new MyList();
        list.add("Czerwony");
        list.add("Zielony");
        list.add("Niebieski");
        add(list);
    }

    class MyList extends List {

        public MyList() {
            enableEvents(AWTEvent.ITEM_EVENT_MASK
                    | AWTEvent.ACTION_EVENT_MASK);
        }

        protected void processActionEvent(ActionEvent ae) {
            showStatus("Zdarzenie akcji: " + ae.getActionCommand());
            super.processActionEvent(ae);
        }

        protected void processItemEvent(ItemEvent ie) {
            showStatus("Zdarzenie elementu: " + getSelectedItem());
            super.processItemEvent(ie);
        }
    }
}
Listing 25.
/* 
* <applet code=ScrollbarDemo2 width=300 height=100> 
* </applet> 
*/ 
import java.awt.*; 
import java.awt.event.*; 


import java.applet.*; 

public class ScrollbarDemo2 extends Applet {

    MyScrollbar myScrollbar;

    public void init() {
        myScrollbar = new MyScrollbar(Scrollbar.HORIZONTAL,
                0, 1, 0, 100);
        myScrollbar.setPreferredSize(new Dimension(100, 20));
        add(myScrollbar);
    }

    class MyScrollbar extends Scrollbar {

        public MyScrollbar(int style, int initial, int thumb,
                int min, int max) {
            super(style, initial, thumb, min, max);
            enableEvents(AWTEvent.ADJUSTMENT_EVENT_MASK);
        }

        protected void processAdjustmentEvent(AdjustmentEvent ae) {
            showStatus("Zdarzenie dostosowania: " + ae.getValue());
            setValue(getValue());
            super.processAdjustmentEvent(ae);
        }
    }
}
